--- RTCVideoEncoderH264.mm	2022-05-18 12:23:28.005027100 +0900
+++ RTCVideoEncoderH264.mm.patch	2022-06-15 15:56:39.947783400 +0900
@@ -173,103 +173,17 @@
 // no specific VideoToolbox profile for the specified level, AutoLevel will be
 // returned. The user must initialize the encoder with a resolution and
 // framerate conforming to the selected H264 level regardless.
-CFStringRef ExtractProfile(const webrtc::H264ProfileLevelId &profile_level_id) {
+CFStringRef ExtractProfile(const webrtc::H264ProfileLevelId& profile_level_id) {
   switch (profile_level_id.profile) {
     case webrtc::H264Profile::kProfileConstrainedBaseline:
     case webrtc::H264Profile::kProfileBaseline:
-      switch (profile_level_id.level) {
-        case webrtc::H264Level::kLevel3:
-          return kVTProfileLevel_H264_Baseline_3_0;
-        case webrtc::H264Level::kLevel3_1:
-          return kVTProfileLevel_H264_Baseline_3_1;
-        case webrtc::H264Level::kLevel3_2:
-          return kVTProfileLevel_H264_Baseline_3_2;
-        case webrtc::H264Level::kLevel4:
-          return kVTProfileLevel_H264_Baseline_4_0;
-        case webrtc::H264Level::kLevel4_1:
-          return kVTProfileLevel_H264_Baseline_4_1;
-        case webrtc::H264Level::kLevel4_2:
-          return kVTProfileLevel_H264_Baseline_4_2;
-        case webrtc::H264Level::kLevel5:
-          return kVTProfileLevel_H264_Baseline_5_0;
-        case webrtc::H264Level::kLevel5_1:
-          return kVTProfileLevel_H264_Baseline_5_1;
-        case webrtc::H264Level::kLevel5_2:
-          return kVTProfileLevel_H264_Baseline_5_2;
-        case webrtc::H264Level::kLevel1:
-        case webrtc::H264Level::kLevel1_b:
-        case webrtc::H264Level::kLevel1_1:
-        case webrtc::H264Level::kLevel1_2:
-        case webrtc::H264Level::kLevel1_3:
-        case webrtc::H264Level::kLevel2:
-        case webrtc::H264Level::kLevel2_1:
-        case webrtc::H264Level::kLevel2_2:
-          return kVTProfileLevel_H264_Baseline_AutoLevel;
-      }
-
+      return kVTProfileLevel_H264_Baseline_AutoLevel;
     case webrtc::H264Profile::kProfileMain:
-      switch (profile_level_id.level) {
-        case webrtc::H264Level::kLevel3:
-          return kVTProfileLevel_H264_Main_3_0;
-        case webrtc::H264Level::kLevel3_1:
-          return kVTProfileLevel_H264_Main_3_1;
-        case webrtc::H264Level::kLevel3_2:
-          return kVTProfileLevel_H264_Main_3_2;
-        case webrtc::H264Level::kLevel4:
-          return kVTProfileLevel_H264_Main_4_0;
-        case webrtc::H264Level::kLevel4_1:
-          return kVTProfileLevel_H264_Main_4_1;
-        case webrtc::H264Level::kLevel4_2:
-          return kVTProfileLevel_H264_Main_4_2;
-        case webrtc::H264Level::kLevel5:
-          return kVTProfileLevel_H264_Main_5_0;
-        case webrtc::H264Level::kLevel5_1:
-          return kVTProfileLevel_H264_Main_5_1;
-        case webrtc::H264Level::kLevel5_2:
-          return kVTProfileLevel_H264_Main_5_2;
-        case webrtc::H264Level::kLevel1:
-        case webrtc::H264Level::kLevel1_b:
-        case webrtc::H264Level::kLevel1_1:
-        case webrtc::H264Level::kLevel1_2:
-        case webrtc::H264Level::kLevel1_3:
-        case webrtc::H264Level::kLevel2:
-        case webrtc::H264Level::kLevel2_1:
-        case webrtc::H264Level::kLevel2_2:
-          return kVTProfileLevel_H264_Main_AutoLevel;
-      }
-
+      return kVTProfileLevel_H264_Main_AutoLevel;
     case webrtc::H264Profile::kProfileConstrainedHigh:
     case webrtc::H264Profile::kProfileHigh:
     case webrtc::H264Profile::kProfilePredictiveHigh444:
-      switch (profile_level_id.level) {
-        case webrtc::H264Level::kLevel3:
-          return kVTProfileLevel_H264_High_3_0;
-        case webrtc::H264Level::kLevel3_1:
-          return kVTProfileLevel_H264_High_3_1;
-        case webrtc::H264Level::kLevel3_2:
-          return kVTProfileLevel_H264_High_3_2;
-        case webrtc::H264Level::kLevel4:
-          return kVTProfileLevel_H264_High_4_0;
-        case webrtc::H264Level::kLevel4_1:
-          return kVTProfileLevel_H264_High_4_1;
-        case webrtc::H264Level::kLevel4_2:
-          return kVTProfileLevel_H264_High_4_2;
-        case webrtc::H264Level::kLevel5:
-          return kVTProfileLevel_H264_High_5_0;
-        case webrtc::H264Level::kLevel5_1:
-          return kVTProfileLevel_H264_High_5_1;
-        case webrtc::H264Level::kLevel5_2:
-          return kVTProfileLevel_H264_High_5_2;
-        case webrtc::H264Level::kLevel1:
-        case webrtc::H264Level::kLevel1_b:
-        case webrtc::H264Level::kLevel1_1:
-        case webrtc::H264Level::kLevel1_2:
-        case webrtc::H264Level::kLevel1_3:
-        case webrtc::H264Level::kLevel2:
-        case webrtc::H264Level::kLevel2_1:
-        case webrtc::H264Level::kLevel2_2:
-          return kVTProfileLevel_H264_High_AutoLevel;
-      }
+      return kVTProfileLevel_H264_High_AutoLevel;
   }
 }
 
@@ -394,6 +308,7 @@
     return WEBRTC_VIDEO_CODEC_UNINITIALIZED;
   }
   BOOL isKeyframeRequired = NO;
+  _pixelBufferPool = VTCompressionSessionGetPixelBufferPool(_compressionSession);
 
   // Get a pixel buffer from the pool and copy frame data over.
   if ([self resetCompressionSessionIfNeededWithFrame:frame]) {
